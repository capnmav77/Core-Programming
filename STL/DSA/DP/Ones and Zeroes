/*
    Company Tags  : Google
    Leetcode Link : https://leetcode.com/problems/ones-and-zeroes/
*/

//Approach-1 (Recursion and Memoization)
class Solution {
public:
    int t[101][101][601];
    int solve(vector<pair<int, int>>& count, int m, int n, int index) {
        if(index >= count.size() || m+n == 0)
            return 0;
        if(t[m][n][index] != -1)
            return t[m][n][index];
        int include = 0;
        if(count[index].first <= m && count[index].second <= n) {
            include = 1 + solve(count, m-count[index].first, n-count[index].second, index+1);
        }
        
        int exclude = solve(count, m, n, index+1);
        
        return t[m][n][index] = max(include, exclude);
    }
    int findMaxForm(vector<string>& strs, int m, int n) {
        int N = strs.size();
        vector<pair<int, int>> count(N);
        int i = 0;
        for(string str:strs) {
            int countOnes  = 0;
            int countZeros = 0;
            
            for(char ch:str) {
                if(ch == '1')
                    countOnes++;
                else
                    countZeros++;
            }
            
            count[i++] = {countZeros, countOnes};
        }
        
        memset(t, -1, sizeof(t));
        return solve(count, m, n, 0);
    }
};

//Approach-2 (DP-Bottom Up)
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<vector<int>> t(m+1, vector<int>(n+1, 0));
        for(string str:strs) {
            int countOnes  = 0;
            int countZeros = 0;
            
            for(char ch:str) {
                if(ch == '1')
                    countOnes++;
                else
                    countZeros++;
            }
            
            for(int zero = m; zero >= countZeros; zero--) {
                for(int one = n; one >= countOnes; one--) {
                    t[zero][one] = max(t[zero][one], t[zero-countZeros][one-countOnes] + 1); //(exclude(previous value), include)
                }
            }
            
        }
        
        return t[m][n];
    }
};
