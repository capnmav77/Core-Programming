/*
  Leetcode - 559
  Leetcode Question Link : https://leetcode.com/problems/maximum-depth-of-n-ary-tree/
*/

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int maxD(Node* root) {
        if(!root)
            return 0;
        queue<Node*> que;
        que.push(root);
        int depth = 0;
        while(!que.empty()) {
            int n = que.size();
            if(n == 0)
                return depth;
            depth++;
            while(n--) {
                Node* curr = que.front();
                que.pop();
                int sz = curr->children.size();
                for(int i = 0; i<sz; i++) {
                    if(curr->children[i] != NULL)
                        que.push(curr->children[i]);
                }
            }
        }
        return depth;
    }
    
    int maxDRecur(Node* root) {
        if(!root)
            return 0;
        int temp = 0;
        //maximum depth among all the parent's children
        for(int i = 0; i<root->children.size(); i++) {
            temp = max(temp, maxDRecur(root->children[i]));
        }
        
        return 1+temp; //1 = including the parent
    }
    
    int maxDepth(Node* root) {
        //return maxD(root);
        return maxDRecur(root);
    }
};
