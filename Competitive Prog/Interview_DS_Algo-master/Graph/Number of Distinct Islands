/*
    Company Tags     : Amazon
    Leetcode Qn Link : https://leetcode.com/problems/number-of-distinct-islands/
    Since this is a premimum question, you can find the Description below :
    Description
    Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land)
    connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are
    surrounded by water. Count the number of distinct islands. An island is considered to be the same
    as another if and only if one island has the same shape as another island (and not rotated or reflected).
    Example 1:

    Input: 
      [
        [1,1,0,0,1],
        [1,0,0,0,0],
        [1,1,0,0,1],
        [0,1,0,1,1]
      ]
    Output: 3
    Explanation:
      11   1    1
      1        11   
      11
       1
*/

/*
    Time : O(rows*cols)
    Space : O(number of islands)
*/
string dfs(vector<vector<int>>& grid, int i, int j, string pattern) {
    if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == 0)
        return "O";

    grid[i][j] = 0;
    pattern += dfs(grid, i+1, j, "D"); //D : Down
    pattern += dfs(grid, i-1, j, "U"); //U : Up
    pattern += dfs(grid, i, j-1, "L"); //L : Left
    pattern += dfs(grid, i, j+1, "R"); //R : Right

    return pattern;
}

int countDistinctIslands(vector<vector<int>> grid) {
    int row = grid.size();
    int col = grid[0].size();

    set<string> st;
    for(int i = 0; i<row; i++) {
        for(int j = 0; j<col; j++) {
            if(grid[i][j] == 1) {
                string island_pattern = dfs(grid, i, j, "X");
                st.insert(island_pattern);
            }
        }
    }
    return st.size();
}
