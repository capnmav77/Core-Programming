/*
    Company Tags : Adobe, Amazon, Morgan Stanley, Samsung
    Link of Qn   : https://practice.geeksforgeeks.org/problems/find-whether-path-exist/0/
*/

#include<iostream>
#include<vector>
using namespace std;
vector<vector<int>> directions{{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
bool isSafe(vector<vector<int>>& grid, int i, int j, int n) {
    if(i < 0 || i >= n || j < 0 || j>= n || 
        grid[i][j] == -1 || grid[i][j] == 0)
        return false;
    return true;
}

bool DFS(vector<vector<int>>& grid, int i, int j, int n) {
    if(!isSafe(grid, i, j, n))
        return false;
    if(grid[i][j] == 2)
        return true;
    
    int temp = grid[i][j];
    grid[i][j] = -1;
    bool result = false;
    for(vector<int> dir:directions) {
        int new_i = i + dir[0];
        int new_j = j + dir[1];
        result |= DFS(grid, new_i, new_j, n);
    }
    grid[i][j] = temp;
    return result;
}

int main()
 {
	int T;
	cin >> T;
	while(T--) {
	    int n;
	    cin >> n;
	    vector<vector<int>> grid(n, vector<int>(n));
	    for(int i = 0; i<n; i++) {
	        for(int j = 0; j<n; j++) {
	            cin >> grid[i][j];
	        }
	    }
	    
	    bool found = false;
	    for(int i = 0; i<n; i++) {
	        for(int j = 0; j<n; j++) {
	            if(grid[i][j] == 1) {
	                found = DFS(grid, i, j, n);
	                break;
	            }
	        }
	    }
	    cout << found << endl;
	}
	return 0;
}
