/*
    Company Tags  : Amazon, Google
    Leetcode Link : https://leetcode.com/problems/pacific-atlantic-water-flow/
*/

//Approach - 1
/*
    Do a DFS on every cell and if a cell reaches both (pacific and atlantic), mark them as the result
    TIme Complexity : (m*n)*(m*n)
*/

//Approach - 2 (Better DFS)
class Solution {
public:
    //helping variables
    vector<vector<int>> directions{{1,0}, {-1, 0}, {0, 1}, {0, -1}};
    
    void DFS(vector<vector<int>>& matrix, int i, int j, int prev, vector<vector<bool>>& visited) {
        if(i<0 || i >= matrix.size() || j < 0 || j >= matrix[0].size())
            return;
        
        //Why matrix[i][j] < prev ?
        //Ans : Because we are thinking backwards here, i.e. if one wants to flow toward pacific/atlantic from inwards to outwards
        //Then, outwards value should be smaller or equal to inwards(prev) value (from where we are coming i.e. from matrix[i][j])
        if(matrix[i][j] < prev || visited[i][j])
            return;
        visited[i][j] = true;
        for(auto dir:directions) {
            int ni = i + dir[0];
            int nj = j + dir[1];
            
            DFS(matrix, ni, nj, matrix[i][j], visited);
        }
    }
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {
        int row = matrix.size();
        if(row == 0)
            return {};
        int col = matrix[0].size();
        vector<vector<int>> result;
        vector<vector<bool>> pacific_visited(row, vector<bool>(col));
        vector<vector<bool>> atlantic_visited(row, vector<bool>(col));
        
        //top row and bottom row
        //top    : pacific
        //bottom : atlantic
        for(int j = 0; j<col; j++) {
            DFS(matrix, 0, j, INT_MIN, pacific_visited); //pacific
            DFS(matrix, row-1, j, INT_MIN, atlantic_visited); //atlantic
        }
        
        //left col and right col
        //left   : pacific
        //right  : atlantic
        for(int i = 0; i<row; i++) {
            DFS(matrix, i, 0, INT_MIN, pacific_visited); //pacific
            DFS(matrix, i, col-1, INT_MIN, atlantic_visited); //atlantic
        }
        
        for(int i = 0; i<row; i++) {
            for(int j = 0; j<col; j++) {
                if(pacific_visited[i][j] && atlantic_visited[i][j])
                    result.push_back({i, j});
            }
        }
        
        return result;
    }
};


//Approach-3 (BFS)
//comming soon with youtube video
