/*
	This is Prim's algorithm implemented using priority_queue (min heap)
	See this question's (Approach-2) to understand better : 
	https://github.com/MAZHARMIK/Interview_DS_Algo/blob/master/Graph/Min%20Cost%20to%20Connect%20All%20Points (Leetcode-1854)
*/

#include<bits/stdc++.h>
using namespace std;

class AdjListNode {
public:
    int v, wt;
    AdjListNode(int _v, int _w) {
        v  = _v;
        wt = _w;
    }
    int getV() {
        return v;
    }
    int getWt() {
        return wt;
    }
};


class Graph {
    int V;
    vector<AdjListNode> *adj;
    void printMST(vector<int>&, vector<int>&);
public :
    Graph(int);
    ~Graph();
    void addEdge(int, int , int);
    void primMST();
};

Graph::Graph(int V) {
    this->V = V;
    this->adj = new vector<AdjListNode> [V];
}

Graph::~Graph() {
    delete[] adj;
}

void Graph::addEdge(int u, int v, int wt) {
    adj[u].push_back(AdjListNode(v, wt));
    adj[v].push_back(AdjListNode(u, wt));
}

struct myComp{
    bool operator()(AdjListNode& adj1, AdjListNode& adj2) {
        if(adj1.getWt() != adj2.getWt())
            return adj1.getWt() > adj2.getWt();
    }
};

void Graph::printMST(vector<int>& parent, vector<int>& key) {
    for(int i = 1; i<V; i++) {
        cout << parent[i] << "->" << i << " : " << key[i] << endl;
    }
}

void Graph::primMST() {
    vector<bool> inMST(V, false);
    vector<int> key(V, INT_MAX);
    vector<int> parent(V);

    parent[0] = -1;
    key[0]    = 0;
    inMST[0]  = true;
    
    priority_queue<AdjListNode, vector<AdjListNode>, myComp>pq; //min heap
    //Basically priority queue consist of pair {vertex, weight}
    
    pq.push(AdjListNode(0, key[0]));
    
    //Note : You can remove key vector in priority_queue approach
    //The sum of weights in the loop below will always give minimum value
    while(!pq.empty()) {
        AdjListNode u = pq.top(); //every time we pick the vertex with least weight
        pq.pop();
	
	if(inMST[u.getV()])
	    continue;
	
        inMST[u.getV()] = true;
	
	//visit neighbors of 'u'
        for(AdjListNode v:adj[u.getV()]) {
            if(!inMST[v.getV()] && v.getWt() < key[v.getV()]) {
                parent[v.getV()] = u.getV();
                key[v.getV()] = v.getWt();
                pq.push(v);
            }
        }
    }
    printMST(parent, key);
}

int main() {
    int V = 5;
    Graph g(V);
    g.addEdge(0,1,2);
	g.addEdge(0,3,6);
	g.addEdge(1,2,3);
	g.addEdge(1,3,8);
	g.addEdge(1,4,5);
	g.addEdge(2,4,7);
	g.addEdge(3,4,9);
	g.primMST();
	return 0;
}
